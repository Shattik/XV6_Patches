diff --git a/Makefile b/Makefile
index 39a99d7..51bcd66 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testprocinfo\
+	$U/_dummyproc\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..64473d3 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             getpinfo(uint64);
+void            boost(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..47981d6 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define DEFAULT_TICKET_COUNT 10   // default ticket count
+#define TIME_LIMIT_1 1   // time limit for queue 1
+#define TIME_LIMIT_2 2   // time limit for queue 2
+#define BOOST_INTERVAL 64   // boost interval
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..0bc3d47 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,8 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
+#include "random.h"
 
 struct cpu cpus[NCPU];
 
@@ -14,6 +16,7 @@ struct proc *initproc;
 
 int nextpid = 1;
 struct spinlock pid_lock;
+struct spinlock ticket_lock;
 
 extern void forkret(void);
 static void freeproc(struct proc *p);
@@ -55,6 +58,11 @@ procinit(void)
       initlock(&p->lock, "proc");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
+      p->original_tickets = 0;
+      p->remaining_tickets = 0;
+      p->current_time_slice = 0;
+      p->total_used_slices = 0;
+      p->queue_num = 0;
   }
 }
 
@@ -124,6 +132,11 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->original_tickets = DEFAULT_TICKET_COUNT;
+  p->remaining_tickets = DEFAULT_TICKET_COUNT;
+  p->current_time_slice = 0;
+  p->total_used_slices = 0;
+  p->queue_num = 1;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -234,6 +247,7 @@ userinit(void)
 {
   struct proc *p;
 
+  initlock(&ticket_lock, "ticket_lock");
   p = allocproc();
   initproc = p;
   
@@ -320,6 +334,8 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+  np->original_tickets = p->original_tickets;
+  np->remaining_tickets = p->remaining_tickets;
   release(&np->lock);
 
   return pid;
@@ -444,29 +460,90 @@ wait(uint64 addr)
 void
 scheduler(void)
 {
-  struct proc *p;
+  //struct proc *p;
   struct cpu *c = mycpu();
+  int round_robin_last = 0;
+  int total_tickets;
+  int random;
+  int got;
   
   c->proc = 0;
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
-
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+    got = 0;
+    total_tickets = 0;
+    random = 0;
+    round_robin_last = (round_robin_last == NPROC-1) ? 0 : round_robin_last%NPROC;
+
+    acquire(&ticket_lock);
+    for(int i=0; i<NPROC; i++){
+      acquire(&proc[i].lock);
+      if(proc[i].state == RUNNABLE && proc[i].queue_num == 1){
+        total_tickets += proc[i].remaining_tickets;
+        got = 1;
+      }
+      release(&proc[i].lock);
+    }
+    if(total_tickets != 0){
+      random = randomrange(1, total_tickets);
+      for(int i=0; i<NPROC; i++){
+        acquire(&proc[i].lock);
+        if(proc[i].state == RUNNABLE && proc[i].queue_num == 1){
+          random -= proc[i].remaining_tickets;
+          if(random <= 0){
+            proc[i].remaining_tickets--;
+            release(&ticket_lock);
+            proc[i].current_time_slice = TIME_LIMIT_1;
+            proc[i].state = RUNNING;
+            c->proc = &proc[i];
+            //printf("Lottery, %d\n", i);
+            swtch(&c->context, &proc[i].context);
+            c->proc = 0;
+            random = -1;
+            if(proc[i].state == RUNNABLE){
+              proc[i].queue_num = 2;
+            }
+          }
+        }
+        release(&proc[i].lock);
+        if(random == -1){
+          break;
+        }
+      }
+    }
+    else{
+      random = 0;
+      if(got == 1){
+        for(int i=0; i<NPROC; i++){
+          acquire(&proc[i].lock);
+          if(proc[i].state == RUNNABLE && proc[i].queue_num == 1){
+            proc[i].remaining_tickets = proc[i].original_tickets;
+          }
+          release(&proc[i].lock);
+        }
+      }
+      release(&ticket_lock);
+      for(int i=round_robin_last; i<NPROC; i++){
+        acquire(&proc[i].lock);
+        if(proc[i].state == RUNNABLE && proc[i].queue_num == 2){
+          proc[i].current_time_slice = TIME_LIMIT_2;
+          proc[i].state = RUNNING;
+          c->proc = &proc[i];
+          //printf("Round Robin, %d\n", i);
+          swtch(&c->context, &proc[i].context);
+          c->proc = 0;
+          random = -1;
+          if(proc[i].state == SLEEPING){
+            proc[i].queue_num = 1;
+          }
+        }
+        release(&proc[i].lock);
+        round_robin_last = i+1;
+        if(random == -1){
+          break;
+        }
       }
-      release(&p->lock);
     }
   }
 }
@@ -494,7 +571,14 @@ sched(void)
     panic("sched interruptible");
 
   intena = mycpu()->intena;
-  swtch(&p->context, &mycpu()->context);
+  p->total_used_slices++;
+  if(p->state != RUNNABLE || p->current_time_slice <= 0){
+    swtch(&p->context, &mycpu()->context);
+  }
+  else{
+    //printf("again\n");
+    p->state = RUNNING;
+  }
   mycpu()->intena = intena;
 }
 
@@ -505,6 +589,7 @@ yield(void)
   struct proc *p = myproc();
   acquire(&p->lock);
   p->state = RUNNABLE;
+  p->current_time_slice--;
   sched();
   release(&p->lock);
 }
@@ -681,3 +766,40 @@ procdump(void)
     printf("\n");
   }
 }
+
+int getpinfo(uint64 ps)
+{
+  struct pstat temp;
+  for(int i=0; i<NPROC; i++){
+    acquire(&proc[i].lock);
+    temp.pid[i] = proc[i].pid;
+    if(proc[i].state == UNUSED){
+      temp.inuse[i] = 0;
+    }
+    else{
+      temp.inuse[i] = 1;
+    }
+    temp.inQ[i] = proc[i].queue_num;
+    temp.tickets_original[i] = proc[i].original_tickets;
+    temp.tickets_current[i] = proc[i].remaining_tickets;
+    temp.time_slices[i] = proc[i].total_used_slices;
+    release(&proc[i].lock);
+  }  
+  
+  if(copyout(myproc()->pagetable, ps, (char *)&temp, sizeof(temp)) < 0){
+    return -1;
+  }
+  return 0;
+}
+
+void boost(void)
+{
+  for(int i=0; i<NPROC; i++){
+    acquire(&proc[i].lock);
+    if(proc[i].queue_num == 2){
+      proc[i].queue_num = 1;
+    }
+    release(&proc[i].lock);
+  }
+  //printf("boosted\n");
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..108a515 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,11 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // need locking
+  int original_tickets;        // Original number of tickets
+  int remaining_tickets;       // Number of remaining tickets
+  int queue_num;               // Queue number
+  int current_time_slice;       // Current time slice
+  int total_used_slices;        // Used time slices
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..b63ddc2
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,14 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+int pid[NPROC]; // the process ID of each process
+int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+int inQ[NPROC]; // which queue the process is currently in
+int tickets_original[NPROC]; // the number of tickets each process originally had
+int tickets_current[NPROC]; // the number of tickets each process currently has
+int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/random.h b/kernel/random.h
new file mode 100644
index 0000000..57e090b
--- /dev/null
+++ b/kernel/random.h
@@ -0,0 +1,33 @@
+// Taken from https://github.com/joonlim
+
+// Return a integer between 0 and ((2^32 - 1) / 2), which is 2147483647.
+uint
+random(void)
+{
+  // Take from http://stackoverflow.com/questions/1167253/implementation-of-rand
+  static unsigned int z1 = 12345, z2 = 12345, z3 = 12345, z4 = 12345;
+  unsigned int b;
+  b  = ((z1 << 6) ^ z1) >> 13;
+  z1 = ((z1 & 4294967294U) << 18) ^ b;
+  b  = ((z2 << 2) ^ z2) >> 27; 
+  z2 = ((z2 & 4294967288U) << 2) ^ b;
+  b  = ((z3 << 13) ^ z3) >> 21;
+  z3 = ((z3 & 4294967280U) << 7) ^ b;
+  b  = ((z4 << 3) ^ z4) >> 12;
+  z4 = ((z4 & 4294967168U) << 13) ^ b;
+
+  return (z1 ^ z2 ^ z3 ^ z4) / 2;
+}
+
+// Return a random integer between a given range.
+int
+randomrange(int lo, int hi)
+{
+  if (hi < lo) {
+    int tmp = lo;
+    lo = hi;
+    hi = tmp;
+  }
+  int range = hi - lo + 1;
+  return random() % (range) + lo;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ce52e87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7926b7f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..8518058 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,8 @@
 #include "spinlock.h"
 #include "proc.h"
 
+extern struct spinlock ticket_lock;
+
 uint64
 sys_exit(void)
 {
@@ -89,3 +91,40 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int n;
+  struct proc *p = myproc();
+  argint(0, &n);
+  if(n < 1){
+    acquire(&ticket_lock);
+    acquire(&p->lock);
+    p->original_tickets = DEFAULT_TICKET_COUNT;
+    p->remaining_tickets = DEFAULT_TICKET_COUNT;
+    release(&p->lock);
+    release(&ticket_lock);
+    return -1;
+  }
+  acquire(&ticket_lock);
+  acquire(&p->lock);
+  p->original_tickets = n;
+  p->remaining_tickets = n;
+  release(&p->lock);
+  release(&ticket_lock);
+  return 0;
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  if(addr == 0){
+    return -1;
+  }
+  else{
+    return getpinfo(addr);
+  }
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..aa8f5f0 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -166,6 +166,9 @@ clockintr()
   acquire(&tickslock);
   ticks++;
   wakeup(&ticks);
+  if(ticks % BOOST_INTERVAL == 0){
+    boost();
+  }
   release(&tickslock);
 }
 
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..a0bd27b
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,23 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]) {
+    if(argc != 2) {
+        fprintf(2, "Usage: %s <ticket_number>\n", argv[0]);
+        exit(1);
+    }
+    int ticket = atoi(argv[1]);
+    settickets(ticket);
+    fork();
+    fork();
+    fork();
+    fork();
+    // for(int i=0; i<1000000; i++) {
+    //     for(int j=0; j<1000000; j++);
+    // }
+    for(int i=0; i<10000; i++){
+        for(int j=0; j<10000; j++);
+    }
+    exit(0);
+}
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..d7eaa8f
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,17 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/pstat.h"
+#include "kernel/param.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    struct pstat st;
+    getpinfo(&st);
+    printf("PID\t|\tIn Use\t|\tinQ\t|\tOriginal Tickets\t|\tCurrent Tickets\t|\tTime Slices\n");
+    for(int i = 0; i < NPROC; i++) {
+        printf(" %d\t|\t  %d\t|\t %d\t|\t       %d\t\t|\t        %d\t|\t      %d\n", st.pid[i], st.inuse[i], st.inQ[i], st.tickets_original[i], st.tickets_current[i], st.time_slices[i]);
+    }
+    exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..64b8048 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
