diff --git a/Makefile b/Makefile
index 39a99d7..a822569 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..84dd3df 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             create_thread(uint64, uint64, uint64);
+void            thread_freepagetable(pagetable_t, uint64);
+int             join(int);
+void            thread_sleep(uint64, uint);
+void            thread_wakeup(uint64, int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -173,6 +178,10 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
+void            uvmfreeforthread(pagetable_t, uint64);
+uint64          uvmallocforthread(pagetable_t, pagetable_t, uint64, uint64);
+uint64          uvmdeallocforthread(pagetable_t, uint64, uint64);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..434f609 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -10,6 +10,8 @@ struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
 
+struct memlock memlocks[NPROC];
+
 struct proc *initproc;
 
 int nextpid = 1;
@@ -56,6 +58,9 @@ procinit(void)
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
+  for(int i = 0; i < NPROC; i++){
+    initlock(&memlocks[i].memory_lock, "memlock");
+  }
 }
 
 // Must be called with interrupts disabled,
@@ -124,6 +129,8 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->is_thread = 0;
+  p->mem_id = p - proc;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -158,8 +165,10 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
+  if(p->pagetable && !p->is_thread)
     proc_freepagetable(p->pagetable, p->sz);
+  else if(p->pagetable && p->is_thread)
+    thread_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -169,6 +178,8 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->mem_id = -1;
+  p->is_thread = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -215,6 +226,15 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+// Free a thread's page table, but not the physical memory
+void 
+thread_freepagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmfreeforthread(pagetable, sz);
+}
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -261,17 +281,53 @@ growproc(int n)
 {
   uint64 sz;
   struct proc *p = myproc();
+  struct proc *pp;
 
+  acquire(&memlocks[p->mem_id].memory_lock);
   sz = p->sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(&memlocks[p->mem_id].memory_lock);
       return -1;
     }
+    for(pp=proc; pp<&proc[NPROC]; pp++){
+      acquire(&pp->lock);
+      if(pp->mem_id == p->mem_id && pp != p && pp->state != ZOMBIE){
+        if(uvmallocforthread(p->pagetable, pp->pagetable, p->sz, sz)==-1){
+          release(&pp->lock);
+          goto bad;
+        }
+        pp->sz = sz;
+      }
+      release(&pp->lock);
+    }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
+    for(pp=proc; pp<&proc[NPROC]; pp++){
+      acquire(&pp->lock);
+      if(pp->mem_id == p->mem_id && pp != p && pp->state != ZOMBIE){
+        uvmdeallocforthread(pp->pagetable, p->sz, sz);
+        pp->sz = sz;
+      }
+      release(&pp->lock);
+    }
   }
   p->sz = sz;
+  release(&memlocks[p->mem_id].memory_lock);
   return 0;
+
+  bad:
+  for(pp=proc; pp<&proc[NPROC]; pp++){
+    acquire(&pp->lock);
+    if(pp->mem_id == p->mem_id && pp->sz != p->sz && pp != p && pp->state != ZOMBIE){
+      uvmdeallocforthread(pp->pagetable, p->sz, sz);
+      pp->sz = p->sz;
+    }
+    release(&pp->lock);
+  }
+  uvmdealloc(p->pagetable, sz, sz + n);
+  release(&memlocks[p->mem_id].memory_lock);
+  return -1;
 }
 
 // Create a new process, copying the parent.
@@ -315,7 +371,12 @@ fork(void)
   release(&np->lock);
 
   acquire(&wait_lock);
-  np->parent = p;
+  if(p->is_thread){
+    np->parent = p->parent;
+  }
+  else{
+    np->parent = p;
+  }
   release(&wait_lock);
 
   acquire(&np->lock);
@@ -340,6 +401,76 @@ reparent(struct proc *p)
   }
 }
 
+// fork like method for creating threads
+int
+create_thread(uint64 fcn, uint64 arg, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+  np->is_thread = 1;
+
+  // clone user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // setting the argument.
+  np->trapframe->a0 = arg;
+  np->trapframe->epc = fcn;
+  uint64 sp = stack + PGSIZE;
+  sp -= sp % 16;
+  uint64 ra = 0xffffffff;
+  sp -= 2*sizeof(uint64);
+  sp -= sp % 16;
+  if(copyout(np->pagetable, sp, (char *)&ra, sizeof(uint64)) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->trapframe->ra = 0xffffffff;
+  np->trapframe->sp = sp;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  if(p->is_thread){
+    np->parent = p->parent;
+  }
+  else{
+    np->parent = p;
+  }
+  np->mem_id = p->mem_id;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait().
@@ -347,6 +478,7 @@ void
 exit(int status)
 {
   struct proc *p = myproc();
+  struct proc *pp;
 
   if(p == initproc)
     panic("init exiting");
@@ -365,6 +497,26 @@ exit(int status)
   end_op();
   p->cwd = 0;
 
+  if(!p->is_thread){
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp!=p && pp->mem_id==p->mem_id){
+        acquire(&pp->lock);
+        if(pp->state != UNUSED && pp->state != ZOMBIE){
+          release(&pp->lock);
+          kill(pp->pid);
+          join(pp->pid);
+        }
+        else if(pp->state != UNUSED){
+          release(&pp->lock);
+          join(pp->pid);
+        }
+        else{
+          release(&pp->lock);
+        }
+      }
+    }
+  }
+
   acquire(&wait_lock);
 
   // Give any children to init.
@@ -434,6 +586,42 @@ wait(uint64 addr)
   }
 }
 
+// join with a thread
+int 
+join(int tid)
+{
+  struct proc *pp;
+  struct proc *p = myproc();
+  int found, index;
+
+  acquire(&wait_lock);
+  for(;;){
+    found = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->pid == tid && pp->mem_id == p->mem_id){
+        found = 1;
+        index = pp - proc;
+        acquire(&pp->lock);
+        if(pp->state == ZOMBIE){
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return tid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    if(!found || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+
+    sleep(proc[index].parent, &wait_lock);
+  }
+
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -561,6 +749,25 @@ sleep(void *chan, struct spinlock *lk)
   acquire(lk);
 }
 
+// Sleep for threads on condition variable
+void
+thread_sleep(uint64 chan, uint val)
+{
+  struct proc *p = myproc();
+  acquire(&memlocks[p->mem_id].memory_lock);
+  uint64 page = walkaddr(p->pagetable, chan);
+  uint64 base = PGROUNDDOWN(chan);
+  uint64 add = page + chan - base;
+
+  if(__sync_lock_test_and_set((int *)add, val) == val){
+    sleep((void *)add, &memlocks[p->mem_id].memory_lock);
+    release(&memlocks[p->mem_id].memory_lock);
+    return;
+  }
+  
+  release(&memlocks[p->mem_id].memory_lock);
+} 
+
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
 void
@@ -579,6 +786,34 @@ wakeup(void *chan)
   }
 }
 
+// Wake up 1 or all threads sleeping on chan.
+void
+thread_wakeup(uint64 chan, int all)
+{
+  struct proc *p = myproc();
+  struct proc *pp;
+
+  acquire(&memlocks[p->mem_id].memory_lock);
+  uint64 page = walkaddr(p->pagetable, chan);
+  uint64 base = PGROUNDDOWN(chan);
+  uint64 add = page + chan - base;
+
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    if(pp != p && pp->mem_id == p->mem_id){
+      acquire(&pp->lock);
+      if(pp->state == SLEEPING && pp->chan == (void *)add){
+        pp->state = RUNNABLE;
+        if(!all){
+          release(&pp->lock);
+          break;
+        }
+      }
+      release(&pp->lock);
+    }
+  }
+  release(&memlocks[p->mem_id].memory_lock);
+}
+
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..4eb099e 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,11 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int is_thread;               // 1 if thread
+  int mem_id;
 };
+
+struct memlock {
+  struct spinlock memory_lock;
+};
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..f5f395e 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_thread_sleep(void);
+extern uint64 sys_thread_wakeup(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]  sys_thread_create,
+[SYS_thread_join]    sys_thread_join,
+[SYS_thread_exit]    sys_thread_exit,
+[SYS_thread_sleep]   sys_thread_sleep,
+[SYS_thread_wakeup]  sys_thread_wakeup,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..042acff 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create  22
+#define SYS_thread_join  23
+#define SYS_thread_exit  24
+#define SYS_thread_sleep  25
+#define SYS_thread_wakeup  26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..8ad270d 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,50 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return create_thread(fcn, arg, stack);
+}
+
+uint64
+sys_thread_join(void)
+{
+  uint64 thread_id;
+  argaddr(0, &thread_id);
+  return join(thread_id);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  exit(1);
+  return 0;
+}
+
+uint64
+sys_thread_sleep(void)
+{
+  uint64 chan;
+  uint val;
+  argaddr(0, &chan);
+  argint(1, (int*)&val);
+  thread_sleep(chan, val);
+  return 0;
+}
+
+uint64
+sys_thread_wakeup(void)
+{
+  uint64 chan;
+  int all;
+  argaddr(0, &chan);
+  argint(1, &all);
+  thread_wakeup(chan, all);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..07e08dd 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -248,6 +248,33 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
   return newsz;
 }
 
+// Allocate PTEs for sibling threads (even parent)
+uint64
+uvmallocforthread(pagetable_t old, pagetable_t new, uint64 oldsz, uint64 newsz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  oldsz = PGROUNDUP(oldsz);
+  for(i = oldsz; i < newsz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
@@ -266,6 +293,21 @@ uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
   return newsz;
 }
 
+// Deallocate thread pages 
+uint64
+uvmdeallocforthread(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+  if(newsz >= oldsz)
+    return oldsz;
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 0);
+  }
+
+  return newsz;
+}
+
 // Recursively free page-table pages.
 // All leaf mappings must already have been removed.
 void
@@ -296,6 +338,15 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+// Free page table, not user memory
+void
+uvmfreeforthread(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -332,6 +383,32 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+// Point to same physical addresses for threads
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 0);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..ced73e9
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,152 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_mutex.h"
+#include "user/thread_condvar.h"
+#include "user/thread_semaphore.h"
+
+struct queue{
+	int arr[16];
+	int front;
+	int rear;
+	int size;
+};
+
+void queue(struct queue *q)
+{
+	q->front = 0;
+	q->rear = 0;
+    q->size = 0;
+}
+void push(struct queue *q, int x)
+{
+	q->arr[q->rear] = x;
+	q->rear = (q->rear+1)%16;
+	q->size++;
+}
+int front(struct queue *q)
+{
+	if(q->size==0)
+	    return -1;
+	return q->arr[q->front];
+}
+void pop(struct queue *q)
+{
+	q->front = (q->front+1)%16;
+	q->size--;
+}
+
+struct queue q;
+// a mutex object lock 
+struct thread_mutex lock;
+// a semaphore object empty
+struct thread_sem empty;
+// a semaphore object full
+struct thread_sem full;
+
+void init_semaphore()
+{
+	// initialize mutex lock
+    thread_mutex_init(&lock);
+	// initialize semaphore empty with 5
+    thread_sem_init(&empty,5);
+	// initialize semaphore full with 0
+    thread_sem_init(&full,0);
+
+}
+
+void ProducerFunc(void * arg)
+{	
+	printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+        thread_sem_wait(&empty);
+		// wait for mutex lock
+        thread_mutex_lock(&lock);
+		
+		sleep(1);	
+		push(&q, i);
+		printf("producer produced item %d\n",i);
+		
+		// unlock mutex lock
+        thread_mutex_unlock(&lock);	
+		// post semaphore full
+        thread_sem_post(&full);
+	}
+    thread_exit();
+}
+
+void ConsumerFunc(void * arg)
+{
+	printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// wait for semphore full
+        thread_sem_wait(&full);
+		// wait for mutex lock
+ 		thread_mutex_lock(&lock);
+			
+		sleep(1);
+		int item = front(&q);
+		pop(&q);
+		printf("consumer consumed item %d\n",item);	
+
+		// unlock mutex lock
+        thread_mutex_unlock(&lock);
+		// post semaphore empty		
+        thread_sem_post(&empty);
+	}
+    thread_exit();
+}
+
+struct thread_sem sems, semt;
+volatile int i = 30;
+
+void s()
+{
+	while(i){
+		thread_sem_wait(&sems);
+		printf("s");
+		i--;
+		thread_sem_post(&semt);
+	}
+	thread_exit();
+}
+
+void t()
+{
+	while(i){
+	thread_sem_wait(&semt);
+	printf("t");
+	i--;
+	thread_sem_post(&sems);
+	}
+	thread_exit();
+}
+
+void main(void)
+{	
+	
+	init_semaphore();
+	
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1, thread2;
+
+  	s1 = malloc(4096);
+  	s2 = malloc(4096);
+
+  	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+  	thread2 = thread_create(ConsumerFunc, (void*)message2, s2); 
+
+  	thread_join(thread1);
+  	thread_join(thread2);	
+    
+	exit(1);
+}
\ No newline at end of file
diff --git a/user/thread_condvar.h b/user/thread_condvar.h
new file mode 100644
index 0000000..6104934
--- /dev/null
+++ b/user/thread_condvar.h
@@ -0,0 +1,38 @@
+struct thread_condvar {
+    uint locked;
+}; 
+
+void
+thread_cond_init(struct thread_condvar *cv)
+{
+    cv->locked = 0;
+}
+
+void
+thread_cond_wait(struct thread_condvar *cv, struct thread_mutex *m)
+{
+    __sync_lock_test_and_set(&cv->locked, 1);
+    thread_mutex_unlock(m);
+
+    while(__sync_lock_test_and_set(&cv->locked, 1) != 0){
+        thread_sleep(cv, cv->locked);
+    }
+
+    thread_mutex_lock(m);
+}
+
+void
+thread_cond_signal(struct thread_condvar *cv)
+{
+    __sync_synchronize();
+    __sync_lock_release(&cv->locked);
+    thread_wakeup(cv, 0);
+}
+
+void
+thread_cond_broadcast(struct thread_condvar *cv)
+{
+    __sync_synchronize();
+    __sync_lock_release(&cv->locked);
+    thread_wakeup(cv, 1);
+}
\ No newline at end of file
diff --git a/user/thread_mutex.h b/user/thread_mutex.h
new file mode 100644
index 0000000..73e39ce
--- /dev/null
+++ b/user/thread_mutex.h
@@ -0,0 +1,25 @@
+struct thread_mutex {
+    uint locked;
+};
+
+void 
+thread_mutex_init(struct thread_mutex *m)
+{
+    m->locked = 0;
+}
+
+void
+thread_mutex_lock(struct thread_mutex *m)
+{
+     while(__sync_lock_test_and_set(&m->locked, 1) != 0){
+        sleep(1);
+     }
+     __sync_synchronize();
+}
+
+void
+thread_mutex_unlock(struct thread_mutex *m)
+{
+    __sync_synchronize();
+    __sync_lock_release(&m->locked);
+}
\ No newline at end of file
diff --git a/user/thread_semaphore.h b/user/thread_semaphore.h
new file mode 100644
index 0000000..3ffbb25
--- /dev/null
+++ b/user/thread_semaphore.h
@@ -0,0 +1,33 @@
+struct thread_sem {
+    int count;
+    struct thread_mutex m;
+    struct thread_condvar c;
+};
+
+void
+thread_sem_init(struct thread_sem *s, int count)
+{
+    s->count = count;
+    thread_mutex_init(&s->m);
+    thread_cond_init(&s->c);
+}
+
+void
+thread_sem_wait(struct thread_sem *s)
+{
+    thread_mutex_lock(&s->m);
+    while(__sync_lock_test_and_set(&s->count, s->count) <= 0){
+        thread_cond_wait(&s->c, &s->m);
+    }
+    __sync_fetch_and_sub(&s->count, 1);
+    thread_mutex_unlock(&s->m);
+}
+
+void
+thread_sem_post(struct thread_sem *s)
+{
+    thread_mutex_lock(&s->m);
+    __sync_fetch_and_add(&s->count, 1);
+    thread_cond_broadcast(&s->c);
+    thread_mutex_unlock(&s->m);
+}
\ No newline at end of file
diff --git a/user/thread_spinlock.h b/user/thread_spinlock.h
new file mode 100644
index 0000000..0b10e79
--- /dev/null
+++ b/user/thread_spinlock.h
@@ -0,0 +1,47 @@
+struct thread_spinlock {
+  uint locked;       // Is the lock held?
+};
+
+void
+thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+}
+
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+}
+
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+}
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..1de37aa
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,76 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_spinlock.h"
+#include "user/thread_mutex.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+//struct thread_spinlock lock;
+struct thread_mutex mlock;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+    printf( "Starting do_work: s:%s\n", b->name);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+         //thread_spin_lock(&lock);
+          thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         //thread_spin_unlock(&lock);
+          thread_mutex_unlock(&mlock);
+
+    }
+  
+    printf( "Done s:%x\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  //thread_spin_init(&lock);
+    thread_mutex_init(&mlock);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(1);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..941acf7 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*)(void*), void*, void*);
+int thread_join(int);
+void thread_exit(void);
+void thread_sleep(void *, uint);
+void thread_wakeup(void *, int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..b930a30 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("thread_sleep");
+entry("thread_wakeup");
\ No newline at end of file
